/*
This file was using SCSS syntax. All SCSS variables and @use have been removed for valid CSS.
If you want to use variables and loops, use a .scss file and compile it to CSS.
*/

:root {
	color-scheme: dark;
	--cube-size: 5rem;
	--camera-distance: 50rem;

	--air-image: none;
	--pickaxe-image: url("https://benjaminaster.com/css-minecraft/assets/pickaxe.png");
	--stone-image: url("https://benjaminaster.com/css-minecraft/assets/stone.png");
	--grass-image: url("https://benjaminaster.com/css-minecraft/assets/grass_side_carried.png");
	--grass-top-image: url("https://benjaminaster.com/css-minecraft/assets/grass_carried.png");
	--dirt-image: url("https://benjaminaster.com/css-minecraft/assets/dirt.png");
	--log-image: url("https://benjaminaster.com/css-minecraft/assets/log_oak.png");
	--log-top-image: url("https://benjaminaster.com/css-minecraft/assets/log_oak_top.png");
	--leaves-image: url("https://benjaminaster.com/css-minecraft/assets/azalea_leaves.png");
	--glass-image: url("https://benjaminaster.com/css-minecraft/assets/glass.png");
}

body {
	color: white;
	background-color: lightSkyBlue;
	block-size: 100vh;
	block-size: 100dvb;
	margin: 0;
	box-sizing: border-box;
	font-family: system-ui, sans-serif;
	overflow: hidden;

	perspective: var(--camera-distance);
	perspective-origin: center center;

	display: grid;
	place-content: center center;
}

body, body * {
	transform-style: preserve-3d;
}

label, button {
	cursor: pointer;
}

h1, p {
	margin: 0;
}

h1, strong {
	font-weight: 600;
}

a {
	color: inherit;
}

.info {
	z-index: 1;
	position: absolute;
	inset-block-start: 0;
	inset-inline: 0;
	padding: .75rem;
	margin-inline: auto;
	inline-size: fit-content;
	max-inline-size: min(60rem, 100vw - 10rem);
	background-color: #1117;
	--backdrop-filter: blur(.4rem);
	-webkit-backdrop-filter: var(--backdrop-filter);
	backdrop-filter: var(--backdrop-filter);
	border-radius: .6rem;
	border-start-start-radius: 0;
	border-start-end-radius: 0;
	text-align: center;
	box-shadow: 0 0 1.5rem #0006;
	display: flex;
	align-items: center;
	gap: 1rem;

	& strong {
		color: gold;
	}

	& .text {
		display: flex;
		flex-direction: column;
		gap: .3rem;
	}

	& .close {
		padding-inline: .3rem;

		&::before {
			content: "â¨‰";
			font-size: 1.5rem;
		}

		& > input[type=checkbox] {
			position: absolute;
			opacity: 0;
			pointer-events: none;
		}
	}

	&:has(.close > input[type=checkbox]:checked) {
		display: none;
	}

	& .not-supported {
		border: 2px solid red;
		background-color: #f004;
		border-radius: .7rem;
		padding: .6rem .4rem;
	}

	@supports selector(:has(a)) {
		& .not-supported {
			display: none;
		}
	}
}

.controls {
	z-index: 1;
	position: absolute;
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-items: center;
	gap: 1.25rem;
	border-radius: 1rem;
	box-shadow: 0 0 1.5rem #0006;
	background-color: #2228;
	--backdrop-filter: blur(.3rem);
	-webkit-backdrop-filter: var(--backdrop-filter);
	backdrop-filter: var(--backdrop-filter);
	padding: .75rem;
	margin-block-end: .75rem;
	inset-block-end: 0;
	inset-inline: 0;
	margin-inline: auto;
	inline-size: fit-content;
	max-inline-size: calc(100vw - 4rem);

	& .block-chooser {
		display: flex;
		align-items: center;
		gap: .5rem;

		& > label {
			display: block;
			inline-size: 3rem;
			block-size: 3rem;
			border-radius: .3rem;
			box-sizing: border-box;
			background-size: 100% 100%;
			background-repeat: no-repeat;
			image-rendering: pixelated;
			outline-offset: 1px;

			@each $block in $blocks {
				&.#{$block} {
					background-image: var(--#{$block}-image);
				}
			}

			&.air {
				// background-color: #fff2;
				// --line-thickness: 5px;
				// background-image: linear-gradient(
				// 	-50grad,
			/* SCSS @each removed. Manually list block classes for valid CSS: */
			&.air { background-image: var(--air-image); }
			&.stone { background-image: var(--stone-image); }
			&.grass { background-image: var(--grass-image); }
			&.dirt { background-image: var(--dirt-image); }
			&.log { background-image: var(--log-image); }
			&.air {
				background-image: var(--pickaxe-image);
			}

			& > input[type=radio] {
				position: absolute;
				opacity: 0;
				pointer-events: none;
			}
		}
	}

	@each $block, $_ in $blocks {
		&:has(> .block-chooser > .#{$block} > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.#{$block}) {
			display: none;
		}
	}

	& .move-buttons {
		display: flex;
		align-items: center;
		gap: .5rem;

		& > button {
			display: block;
			inline-size: 3rem;
			block-size: 3rem;
			border: none;
	/* SCSS @each removed. Manually list block selectors for valid CSS: */
	&:has(> .block-chooser > .air > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.air) {
		display: none;
	}
	&:has(> .block-chooser > .stone > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.stone) {
		display: none;
	}
	&:has(> .block-chooser > .grass > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.grass) {
		display: none;
	}
	&:has(> .block-chooser > .dirt > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.dirt) {
		display: none;
	}
	&:has(> .block-chooser > .log > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.log) {
		display: none;
	}
	&:has(> .block-chooser > .leaves > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.leaves) {
		display: none;
	}
	&:has(> .block-chooser > .glass > input[type=radio]:checked) ~ .content .cubes-container > .cube:not(.glass) {
		display: none;
	}
				background-color: #0005;
			}

			&:active {
				background-color: #0007;
			}

			&:is(.forwards, .clockwise, .look-up) {
				margin-inline-start: .75rem;
			}
		}
	}

	&:has(> .move-buttons > .up:active) ~ .content .down {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .down:active) ~ .content .up {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .clockwise:active) ~ .content .clockwise {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .counterclockwise:active) ~ .content .counterclockwise {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .forwards:active) ~ .content .backwards {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .backwards:active) ~ .content .forwards {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .look-up:active) ~ .content .look-up {
		animation-play-state: running;
	}
	&:has(> .move-buttons > .look-down:active) ~ .content .look-down {
		animation-play-state: running;
	}
}


.content {
	rotate: x -50grad;

	--animation-duration: 10000s;
	--max-translation: 400000rem;
	--max-rotation: 3000turn;

	& .initial-camera-position {
		translate: 0 calc(var(--layers) * var(--cube-size) * .4) calc(var(--camera-distance) - var(--rows) * var(--cube-size) * .9);
	}

	&, & .look-up, & .look-down {
		transform-origin: 0 0 var(--camera-distance);
	}

	& .look-up {
		animation: var(--animation-duration) linear 1ms paused look-up;
		@keyframes look-up {
			from {
				rotate: x 0turn;
			}
			to {
				rotate: x calc(var(--max-rotation));
			}
		}
	}
	& .look-down {
		animation: var(--animation-duration) linear 1ms paused look-down;
		@keyframes look-down {
			from {
				rotate: x 0turn;
			}
			to {
				rotate: x calc(-1 * var(--max-rotation));
			}
		}
	}
	& .down {
		animation: var(--animation-duration) linear 1ms paused move-down;
		@keyframes move-down {
			from {
				translate: 0 0;
			}
			to {
				translate: 0 calc(var(--max-translation));
			}
		}
	}
	& .up {
		animation: var(--animation-duration) linear 1ms paused move-up;
		@keyframes move-up {
			from {
				translate: 0 0;
			}
			to {
				translate: 0 calc(-1 * var(--max-translation));
			}
		}
	}
	& .forwards {
		animation: var(--animation-duration) linear 1ms paused move-forwards;
		@keyframes move-forwards {
			from {
				translate: 0 0 0;
			}
			to {
				translate: 0 0 calc(-1 * var(--max-translation));
			}
		}
	}
	& .backwards {
		animation: var(--animation-duration) linear 1ms paused move-backwards;
		@keyframes move-backwards {
			from {
				translate: 0 0 0;
			}
			to {
				translate: 0 0 calc(var(--max-translation));
			}
		}
	}
	& .clockwise {
		animation: var(--animation-duration) linear 1ms paused rotate-clockwise;
		@keyframes rotate-clockwise {
			from {
				rotate: y 0turn;
			}
			to {
				rotate: y calc(-1 * var(--max-rotation));
			}
		}
	}
	& .counterclockwise {
		animation: var(--animation-duration) linear 1ms paused rotate-counterclockwise;
		@keyframes rotate-counterclockwise {
			from {
				rotate: y 0turn;
			}
			to {
				rotate: y calc(var(--max-rotation));
			}
		}
	}

	.blocks {
		position: relative;
		translate: calc(-.5 * var(--columns) * var(--cube-size)) calc(-.5 * var(--layers) * var(--cube-size)) calc(-.5 * var(--rows) * var(--cube-size));

		.cubes-container {
			translate: calc(var(--column) * var(--cube-size)) calc(var(--layer) * var(--cube-size)) calc(var(--row) * var(--cube-size));
			&:has(> .cube.air > input[type=radio]:checked) {
				display: none;
			}

			/* SCSS @each removed. Manually list block selectors for valid CSS: */
			&:has(> .cube.air > input[type=radio]:checked) {
				--background-image: var(--air-image);
			}
			&:has(> .cube.stone > input[type=radio]:checked) {
				--background-image: var(--stone-image);
			}
			&:has(> .cube.grass > input[type=radio]:checked) {
				--background-image: var(--grass-image);
			}
			&:has(> .cube.dirt > input[type=radio]:checked) {
				--background-image: var(--dirt-image);
			}
			&:has(> .cube.log > input[type=radio]:checked) {
				--background-image: var(--log-image);
			}
			&:has(> .cube.leaves > input[type=radio]:checked) {
				--background-image: var(--leaves-image);
			}
			&:has(> .cube.glass > input[type=radio]:checked) {
				--background-image: var(--glass-image);
			}
			}

			.cube {
				position: absolute;
				block-size: var(--cube-size);
				inline-size: var(--cube-size);

				& > input[type=radio] {
					position: absolute;
					opacity: 0;
					pointer-events: none;
				}

				& > label {
					position: absolute;
					inset: 0;
					background-image: var(--background-image);
					image-rendering: pixelated;
					background-size: 100% 100%;
					// backface-visibility: hidden;
					transform-origin: center center calc(-1 * var(--cube-size) / 2);
					translate: 0 0 calc(var(--cube-size) / 2);
					box-sizing: border-box;

					&:hover {
						--outline-width: calc(var(--cube-size) / 24);
						outline: var(--outline-width) solid white;
						outline-offset: calc(-1 * var(--outline-width));
					}

					&.front {
						rotate: y 0grad;
					}
					&.back {
						rotate: y 200grad;
					}
			&:has(> .cube.grass > input[type=radio]:checked) > .cube > label.top {
				background-image: var(--grass-top-image);
			}
			&:has(> .cube.grass > input[type=radio]:checked) > .cube > label.bottom {
				background-image: var(--dirt-image);
			}

			&:has(> .cube.log > input[type=radio]:checked) > .cube > label.top,
			&:has(> .cube.log > input[type=radio]:checked) > .cube > label.bottom {
				background-image: var(--log-top-image);
			}

			&:has(> .cube.grass > input[type=radio]:checked) > .cube > label {
				&.top {
					background-image: var(--grass-top-image);
				}
				&.bottom {
					background-image: var(--dirt-image);
				}
			}

			&:has(> .cube.log > input[type=radio]:checked) > .cube > label {
				&:is(.top, bottom) {
					background-image: var(--log-top-image);
				}
			}
		}
	}
}

